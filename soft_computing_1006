Treeview;

//All defined in Universe class

public double xmin=0.0, xmax=10.0, interval=0.1;

public Chartarea area;
public Chart hostChart;
//using System.Windows.Forms.DataVisualization.Charting;

//constructor
public Universe(Chart c){
	hostChart = c;
	name = "X" + count++.ToString();
	area = new ChartArea(name);
	area.AxisX.Minimum  = xmin;
	area.AxisX.Maximum  = xmax;
	area.AxisX.Interval = interval;
	area.AxisX.Title    = name;
	hostChart.ChartAreas.Add(area);
}

public override string ToString(){
	return name;
}

<--------------------------------------------------------->

<main.cs>
[Button Click]
	Universe u = new Univers(chart1);
	//tree.Nodes.Add(TreeNode node); (overload)
	//Add chartarea to chart1;
	//TreeNode tn = new TreeNode(string text)
	TreeNode tn = new TreeNode(u.name);
	tn.Tag = u;
	tree.Nodes.Add();

	//Form properties, anchor

	//Add class diagram
<--------------------------------------------------------->
	Universe<---FuzzySet<---GaussianFuzzySet
			 			  |
			 			  |-TriangleFuzzySet
			 			  |



<--------------------------------------------------------->
<FuzzySet.cs> //use to be a prototype of different fuzzyset class;
	
	//protected -> only available for the current class and the son of the current class;
	protected static Random rnd = new Random();
	protected string name;
	protected double[] parameterValues;
	protected Universe theUniverse;
	protected Series series;

	public FuzzySet(Universe u){
		theUniverse = u;
		sries = new Series();
		u.hostChart.Series.Add(series);
		series.ChartArea = u.area.Name;
	}

	public virtual double GetFuncitonValue(double x){
		return 0.0;
	}

	public add_data(){
		;
	}

<-------------------------------------------------------->
public class Gaussian : FuzzySet{
	Static int count = 1;
	public Gaussian(Universe u) : base(u){
		name = "Gaussian" + count++.ToString();
		parameterValues = new double[2];
		parameterValues[0] = rnd.NextDouble() * (theUnuiverse.xmax - theUniverse.xmin);	
		parameterValues[0] = rnd.NextDouble() * (theUnuiverse.xmax - theUniverse.xmin);
	}
	protected override double GetFunctionValue(){
		double y = 0.0;
		//	y = Math.Exp( -0.5 * (x-parameterValues[0]));
		return 0;
		//Math.Pow(x,y) x^y x = -1, y = 0.5;
	}
}

<-------------------------------------------------------->
Add new function in dufferent class;

Make a template with hierarchy.
